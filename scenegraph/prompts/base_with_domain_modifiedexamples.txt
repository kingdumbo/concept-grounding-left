I am going to ask you to write some programs to answer some questions based on a scene. You will be using the Python language, but you should only use the following features:

1. to classify whether an object has a certain property, use cat(x), where cat is the property you want to test, and x is a variable.
2. to classify whether two objects have a certain property, use on(x, y).
3. you can use and, or, not Boolean operations based on these classification results. For example, cat(x) and lawn(y) and on(x, y)
4. when you want to select an object based on a property that this object should have, use iota(Object, lambda x: cat(x)) (selects the only cat in the scene).
5. when you want to check whether there exists a cat in the scene, use exists(Object, lambda x: cat(x)).
6. when you want to count the number of cats in a scene, use count(Object, lambda x: cat(x))
7. if you want to query the property of an object, for example, the color of a cat, use the following program: describe(Color, iota(Object, lambda y: cat(y)))
8: describe can only be used as the outermost function. If you want to compare a property between two objects, use same_color(x, y).
9. there are also three built-in operations for number comparisons: equal, less_than, and greater_than.
10. if you want to compare whether two objects are the same object, use same_object(x, y)
10. other than these specified functions and variables in lambda functions, you should not invent new variables or constants. You also shouldn't use built-in comparison primitives, such as == and >=.
11. you should make your invented functions as primitive as possible. For example, instead of using white_cat(x), use white(x) and cat(x)
12. Please make sure that your expression has balanced ( and ).
13. before you write the programs, first translate the language into a more simple form, removing excess information, for example, simplify <text>what's the color of the towel hanging draped over the side of the tub.</text> to <simplified>color of the towel on the tub</simplified>, before writing the correct program, <code>describle(Color, iota(Object, lambda x: towel(x) and on(x, iota(Object, lambda y: bathtub(y)))))</code>.

----
You are only allowed to use the following properties:

equal(x,y)
greater_than(x,y)
less_than(x,y)
infovofrobot(x)
inhandofrobot(x)
inreachofrobot(x)
insameroomasrobot(x)
isnear(x)
cookable(x)
dustyable(x)
freezable(x)
openable(x)
sliceable(x)
soakable(x)
stainable(x)
toggleable(x)
onfloor(x)
coldSource(x)
cleaningTool(x)
atsamelocation(x,y)
inside(x,y)
nextto(x,y)
onTop(x,y)
under(x,y)
blender(x)
apple(x)
broom(x)
dustpan(x)
plate(x)
furniture(x)
cabinet(x)
countertop(x)

----

Now I first give you a few examples:

<text>What is the position of the blender?</text>
<simplified>position of blender</simplified>
<code>describe(Position, iota(Object, lambda y: blender(y)))</code>

<text>What is the height of the cabinet that's not in front of the robot?</text>
<simplified>height of cabinet not infovrobot</simplified>
<code>describe(Height, iota(Object, lambda y: cabinet(y) and not(infovrobot(y))))</code>

<text>What is the color of the apple in the room?</text>
<simplified>color of the apple</simplified>
<code>describe(Color, iota(Object, lambda y: apple(y)))</code>

<text>What is the material of the plate without an apple next to it?</text>
<simplified>material of the plate not next to an apple</simplified>
<code>describe(Material, iota(Object, lambda y: plate(y) and not(nextto(y, iota(Object, lambda z: apple(z))))))</code>

<text>How many pieces of furniture are nearby?</text>
<simplified>count furniture isnear</simplified>
<code>count(Object, lambda x: iota(Object, lambda y: furniture(y)), x)</code>

<text>Are there more plates over brooms at the end of the room?</text>
<simplified>greater count of paltes than brooms</simplified>
<code>greater_than(count(Object, lambda x: plate(x)), count(Object, lambda x: broom(x)))</code>

<text>Is there a rag on top of the countertop that is front and center of the room?</text>
<simplified>exists rag on top of countertop</simplified>
<code>exists(Object, lambda x: rag(x) and onTop(x, iota(Object, lambda y: and countertop(y))))</code>

<text>Is there a same number of dustpans and brooms or is there less dustpans than brooms?</text>
<simplified>equal count of dustpans and brooms or less than count of dustpans than brooms</simplified>
<code>equal(count(Object, lambda x: dustpan(x)), count(Object, lambda x: broom(x))) or less_than(count(Object, lambda x: dustpan(x)), count(Object, lambda x: broom(x)))</code>

<text>Is there an object in front of the robot, which is next to another object?</text>
