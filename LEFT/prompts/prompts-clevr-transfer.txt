I am going to ask you to write a program given text based on a scene. You will be using the Python language, but you should only use the following features:

1. to classify whether an object has a certain property, use `cat(x)`, where `cat` is the property you want to test, and x is a variable.
2. to classify whether two objects have a certain property, use `on(x, y)`.
3. you can use and, or, not Boolean operations based on these classification results. For example, `cat(x) and lawn(y) and on(x, y)`
4. when you want to select an object based on a property that this object should have, use `iota(Object, lambda x: cat(x))` (selects the only cat in the scene).
5. when you want to check whether there exists a cat in the scene, use `exists(Object, lambda x: cat(x))`.
6. when you want to count the number of cats in a scene, use `count(Object, lambda x: cat(x))`
7. if you want to query the property of an object, for example, the color of a cat, use the following program: `describe(Color, iota(Object, lambda y: cat(y)))`
8: describe can only be used as the outermost function. If you want to compare a property between two objects, use `same_color(x, y)`.
9. there are also three built-in operations for number comparisons: equal, less_than, and greater_than.
10. if you want to compare whether two objects are the same object, use `same_object(x, y)`
11. other than these specified functions and variables in lambda functions, you should not invent new variables or constants. You also shouldn't use built-in comparison primitives, such as == and >=.
12. you should make your invented functions as primitive as possible. For example, instead of using `white_cat(x)`, use `white(x) and cat(x)`
13. if the task is to select an object from the scene, use `point(Object, lambda x: red(x))` to select the red object in the scene.
14. if the task involves changing view point, you can use the view function. But this function can only be used at the outermost level and only together with `point`.
  One example is: view(Object, lambda x: red(x)) and point(Object, lambda x: blue(y) and left(x, iota(Object, lambda y: red(y))))
  which corresponds to "looking at the red object, choose the blue object left of it."
15. importantly, use only the most common and minimal functions, for example, it is fine to simplify `french_door(x)` to `door(x)`, and `beside(x)` to `next(x)`, and `next_to(x)` to `next(x)` or ignore less used adjectives like `illuminating`.
16. before you write the programs, first translate the language into a more simple form, removing excess information, for example, simplify <text>The towel hanging draped over the side of the tub.</text> to <simplified>The towel on the tub</simplified>, before writing the correct program, <code>point(Object, lambda x: towel(x) and on(x, iota(Object, lambda y: bathtub(y))))</code>.
17. if a query asks if you can find a set of objects with relations, each object is referred to with a number, for example object 1. these object numberings act as references. the referenced objects sometimes form relations. for code generation, use nested `exist` relations, for example "<code>exists(Object: lambda x1: exists(Object, lambda x2: exists(Object, lambda x3: exists(Object, lambda x4: rubber(x1) and sphere(x1) and small(x2) and small(x3) and purple(x3) and small(x4) and blue(x4) and rubber(x4) and behind(x1, x4) and left(x1, x2) and left(x3, x4) ))))</code></code>"
18. for queries regarding objects in grids, figure out the pattern is in the grid first. write in <simplified> text what the pattern is for each row, for example "<simplified>in this grid, each row have the same shape object with different colors. hence the object in row 3 col 3 should be a red cube, based on the shape in row 3, and the colors of the first two objects.</simplified>". then, reasoning to figure out what properties the object in row 3 col 3 should have, with the most minimal rules for the pattern. finally, write an `exist` function checking only for the properties of the object. do not check for `same_object`.

----

Now I first give you a few examples:

<text>What is the size of the apple?</text>
<simplified>size of apple</simplified>
<code>describe(Size, iota(Object, lambda y: apple(y)))</code>

<text>What is the shape of the cake that's not pink by itself in the corner?</text>
<simplified>shape of cake not pink</simplified>
<code>describe(Shape, iota(Object, lambda y: cake(y) and not(pink(y))))</code>

<text>What is the color of the cake in the room?</text>
<simplified>color of the cake</simplified>
<code>describe(Color, iota(Object, lambda y: cake(y)))</code>

<text>What is the material of the cat without an apple on itself?</text>
<simplified>material of the cat that does not have an apple</simplified>
<code>describe(Material, iota(Object, lambda y: cat(y) and not(have(y, iota(Object, lambda z: apple(z))))))</code>

<text>How many apples does the cat have in its paws?</text>
<simplified>count apples the cat have</simplified>
<code>count(Object, lambda x: have(iota(Object, lambda y: cat(y)), x) and apple(x))</code>

<text>Are there more apples over cakes at the end of the room?</text>
<simplified>greater count of apples than cakes</simplified>
<code>greater_than(count(Object, lambda x: apple(x)), count(Object, lambda x: cake(x)))</code>

<text>Is there an apple next to the cake that is front and center of the room?</text>
<simplified>exists apple next to the cake</simplified>
<code>exists(Object, lambda x: apple(x) and next(x, iota(Object, lambda y: cake(y))))</code>

<text>Is there a same number of cakes and apples or is there less cakes than apples?</text>
<simplified>equal count of cakes and apples or less than count of cakes than apples</simplified>
<code>equal(count(Object, lambda x: cake(x)), count(Object, lambda x: apple(x))) or less_than(count(Object, lambda x: cake(x)), count(Object, lambda x: apple(x)))</code>

<text>The apple that the cat loves with all of its heart.</text>
<simplified>apple that the cat loves</simplified>
<code>point(Object, lambda x: apple(x) and loves(iota(Object, lambda y: cat(y)), x))</code>

<text>The cake with a large apple on the left side of it.</text>
<simplified>cake with large apple on left</simplified>
<code>point(Object, lambda x: cake(x) and left(iota(Object, lambda y: large(y) and apple(y)), x))</code>

<text>There is the brown cat sitting there at the end of the room.</text>
<simplified>brown cat</simplified>
<code>point(Object, lambda x: brown(x) and cat(x))</code>

<text>Facing the cake, the apple on the rightmost side of it in the middle of the room.</text>
<simplified>view cake, the apple on the right</simplified>
<code>view(Object, lambda x: cake(x)) and point(Object, lambda x: apple(x) and right(x, iota(Object, lambda y: cake(y))))</code>

<text>It is the apple by the cat with the cake there in front of it.</text>
<simplified>apple by the cat.</simplified>
<code>point(Object, lambda x: apple(x) and by(x, iota(Object, lambda y: cat(y))))</code>

Now please translate the following text into a program. 
